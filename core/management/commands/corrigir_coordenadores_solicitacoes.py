# core/management/commands/corrigir_coordenadores_solicitacoes.py
"""
Comando para corrigir as solicita√ß√µes importadas que ficaram com usuario_solicitante = admin
ao inv√©s dos coordenadores reais que estavam na planilha original.

Este script:
1. Carrega os dados originais da planilha
2. Cria mapeamento entre nomes da planilha e usu√°rios do sistema
3. Atualiza as 1.915 solicita√ß√µes com o coordenador correto
"""

import json
import logging
from datetime import datetime
from django.core.management.base import BaseCommand, CommandError
from django.db import transaction
from django.utils import timezone
from core.models import Usuario, Solicitacao, Municipio, Projeto, TipoEvento

logger = logging.getLogger(__name__)


class Command(BaseCommand):
    help = 'Corrige coordenadores das solicita√ß√µes importadas'

    def add_arguments(self, parser):
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='Simula a corre√ß√£o sem fazer altera√ß√µes no banco',
        )
        parser.add_argument(
            '--verbose',
            action='store_true',
            help='Mostra informa√ß√µes detalhadas',
        )

    def handle(self, *args, **options):
        self.dry_run = options['dry_run']
        self.verbose = options['verbose']

        self.stdout.write("üîß CORRE√á√ÉO DE COORDENADORES DAS SOLICITA√á√ïES")
        self.stdout.write("=" * 60)

        if self.dry_run:
            self.stdout.write(self.style.WARNING("MODO SIMULA√á√ÉO - Nenhuma altera√ß√£o ser√° feita"))

        try:
            # 1. Carregar dados da planilha original
            coordenadores_planilha = self._carregar_dados_planilha()

            # 2. Criar mapeamento planilha ‚Üí usu√°rio sistema
            mapeamento = self._criar_mapeamento_coordenadores(coordenadores_planilha)

            # 3. Corrigir solicita√ß√µes
            self._corrigir_solicitacoes(mapeamento)

        except Exception as e:
            raise CommandError(f'Erro durante corre√ß√£o: {e}')

    def _carregar_dados_planilha(self):
        """Carrega coordenadores dos dados tratados mais recentes"""
        self.stdout.write("üìã Carregando dados tratados das planilhas...")

        arquivo_dados = 'dados/extraidos/dados_completos_tratados_20250919_153743.json'

        try:
            with open(arquivo_dados, 'r', encoding='utf-8') as f:
                dados = json.load(f)
        except FileNotFoundError:
            raise CommandError(f"Arquivo n√£o encontrado: {arquivo_dados}")

        # Extrair eventos com coordenador dos dados tratados
        eventos_com_coordenador = []
        coordenadores_unicos = set()

        for evento in dados['eventos_agenda']:
            # Usar coordenador_extraido dos dados tratados
            coordenador = evento.get('coordenador_extraido')
            if coordenador and coordenador.strip():
                coord_limpo = coordenador.strip()
                coordenadores_unicos.add(coord_limpo)

                eventos_com_coordenador.append({
                    'coordenador': coord_limpo,
                    'municipio': evento.get('municipio', ''),
                    'data': evento.get('data', ''),
                    'projeto': evento.get('projeto', ''),
                    'aba': evento.get('aba', ''),
                    'status_calculado': evento.get('status_calculado', ''),
                    'metadata_extracao': evento.get('metadata_extracao', {}),
                    'dados_completos': evento.get('dados_completos', [])
                })

        self.stdout.write(f"‚úÖ {len(eventos_com_coordenador)} eventos com coordenador identificado")
        self.stdout.write(f"‚úÖ {len(coordenadores_unicos)} coordenadores √∫nicos na planilha")

        if self.verbose:
            for coord in sorted(coordenadores_unicos):
                self.stdout.write(f"  ‚Ä¢ {coord}")

        return eventos_com_coordenador

    def _criar_mapeamento_coordenadores(self, eventos_planilha):
        """Cria mapeamento entre nomes da planilha e usu√°rios do sistema"""
        self.stdout.write("\nüîÑ Criando mapeamento coordenador planilha ‚Üí usu√°rio sistema...")

        # Extrair coordenadores √∫nicos da planilha
        coordenadores_planilha = set()
        for evento in eventos_planilha:
            coordenadores_planilha.add(evento['coordenador'])

        # Buscar usu√°rios coordenadores no sistema
        usuarios_coordenadores = Usuario.objects.filter(
            cargo='coordenador',
            is_active=True
        )

        # Criar mapeamento inteligente
        mapeamento = {}

        # Mapeamento autom√°tico baseado em nomes similares
        for coord_planilha in coordenadores_planilha:
            melhor_match = None

            # Tentar match exato primeiro
            for usuario in usuarios_coordenadores:
                nome_completo = usuario.nome_completo.lower()
                first_name = usuario.first_name.lower() if usuario.first_name else ''

                if coord_planilha.lower() in nome_completo or first_name in coord_planilha.lower():
                    melhor_match = usuario
                    break

            # Mapeamentos espec√≠ficos baseados na an√°lise dos dados tratados
            mapeamentos_especificos = {
                'La√≠s Aline': 'la√≠s.aline',
                'Rafael Rabelo': 'rafael.rabelo',
                'Bruno Teles': 'coordenacao10',
                'Daniele Cristina': 'daniele.cristina',
                'Beatriz Helena': 'coordenacao40',
                'Beatriz Helena Castelo de Andrade Furtado': 'coordenacao40',
                'Ellen Damares': 'coordenacao41',
                'Aurea Lucia': 'coordenacao42',
                'Maria Nadir': 'coordenacao50',
                'Eulina Carmem Santiago de Oliveira': 'coordenacao30',
                'Valdemir Silva Santos': 'coordenacao20',
                'Ana Paula': 'coordenacao15',
                'Amanda': 'coordenacao25',
                'Elienai Oliveira': 'coordenacao35',
            }

            # Usar mapeamento espec√≠fico se dispon√≠vel
            if coord_planilha in mapeamentos_especificos:
                username = mapeamentos_especificos[coord_planilha]
                try:
                    usuario = Usuario.objects.get(username=username)
                    melhor_match = usuario
                except Usuario.DoesNotExist:
                    pass

            if melhor_match:
                mapeamento[coord_planilha] = melhor_match
                if self.verbose:
                    self.stdout.write(f"  ‚úÖ {coord_planilha} ‚Üí {melhor_match.nome_completo} ({melhor_match.username})")
            else:
                self.stdout.write(
                    self.style.WARNING(f"  ‚ö†Ô∏è  {coord_planilha} ‚Üí N√ÉO ENCONTRADO")
                )

        self.stdout.write(f"‚úÖ {len(mapeamento)} coordenadores mapeados de {len(coordenadores_planilha)} total")

        return mapeamento

    def _corrigir_solicitacoes(self, mapeamento):
        """Corrige as solicita√ß√µes com os coordenadores corretos"""
        self.stdout.write("\nüîß Iniciando corre√ß√£o das solicita√ß√µes...")

        # Buscar solicita√ß√µes do admin (importadas incorretamente)
        admin_user = Usuario.objects.filter(username='admin').first()
        if not admin_user:
            raise CommandError("Usu√°rio admin n√£o encontrado")

        solicitacoes_admin = Solicitacao.objects.filter(usuario_solicitante=admin_user)
        total_solicitacoes = solicitacoes_admin.count()

        self.stdout.write(f"üìä {total_solicitacoes} solicita√ß√µes para corrigir")

        if not self.dry_run:
            with transaction.atomic():
                corrigidas = 0
                nao_mapeadas = 0

                # Carregar eventos tratados para correla√ß√£o
                arquivo_dados = 'dados/extraidos/dados_completos_tratados_20250919_153743.json'
                with open(arquivo_dados, 'r', encoding='utf-8') as f:
                    dados = json.load(f)

                # Criar lista de eventos da planilha para matching flex√≠vel
                eventos_planilha = []
                for evento in dados['eventos_agenda']:
                    coordenador = evento.get('coordenador_extraido')
                    if coordenador and coordenador.strip():
                        eventos_planilha.append({
                            'coordenador': coordenador.strip(),
                            'municipio': evento.get('municipio', '').strip(),
                            'data': evento.get('data', '').strip(),
                            'projeto': evento.get('projeto', '').strip(),
                            'status_calculado': evento.get('status_calculado', ''),
                            'evento': evento
                        })

                def normalizar_texto(texto):
                    """Normaliza texto para matching flex√≠vel"""
                    if not texto:
                        return ''
                    return texto.strip().upper().replace(' - ', ' ').replace('-', ' ')

                # Processar cada solicita√ß√£o
                for solicitacao in solicitacoes_admin:
                    data_str = solicitacao.data_inicio.strftime('%d/%m/%Y')
                    municipio_sol = normalizar_texto(solicitacao.municipio.nome)
                    projeto_sol = normalizar_texto(solicitacao.projeto.nome)

                    evento_encontrado = None

                    # Tentativa 1: Match exato
                    for evento_planilha in eventos_planilha:
                        municipio_plan = normalizar_texto(evento_planilha['municipio'])
                        projeto_plan = normalizar_texto(evento_planilha['projeto'])
                        data_plan = evento_planilha['data']

                        if (municipio_sol == municipio_plan and
                            data_str == data_plan and
                            projeto_sol == projeto_plan):
                            evento_encontrado = evento_planilha
                            break

                    # Tentativa 2: Match por munic√≠pio e data (projeto flex√≠vel)
                    if not evento_encontrado:
                        for evento_planilha in eventos_planilha:
                            municipio_plan = normalizar_texto(evento_planilha['municipio'])
                            data_plan = evento_planilha['data']

                            if (municipio_sol == municipio_plan and data_str == data_plan):
                                evento_encontrado = evento_planilha
                                break

                    # Tentativa 3: Match por munic√≠pio usando palavras chave
                    if not evento_encontrado:
                        municipio_palavras = municipio_sol.split()
                        if municipio_palavras:
                            palavra_principal = municipio_palavras[0]  # Primeira palavra (cidade)

                            for evento_planilha in eventos_planilha:
                                municipio_plan = normalizar_texto(evento_planilha['municipio'])
                                data_plan = evento_planilha['data']

                                if (palavra_principal in municipio_plan and data_str == data_plan):
                                    evento_encontrado = evento_planilha
                                    break

                    if evento_encontrado:
                        coordenador_planilha = evento_encontrado['coordenador']

                        if coordenador_planilha in mapeamento:
                            novo_usuario = mapeamento[coordenador_planilha]
                            solicitacao.usuario_solicitante = novo_usuario
                            solicitacao.save()
                            corrigidas += 1

                            if self.verbose and corrigidas <= 10:
                                municipio_match = evento_encontrado['municipio']
                                self.stdout.write(f"  ‚úÖ {solicitacao.municipio.nome} ({municipio_match}) ‚Üí {novo_usuario.first_name} {novo_usuario.last_name}")
                        else:
                            nao_mapeadas += 1
                            if self.verbose and nao_mapeadas <= 5:
                                self.stdout.write(f"  ‚ö†Ô∏è  Coordenador '{coordenador_planilha}' n√£o mapeado para {solicitacao.municipio.nome}")
                    else:
                        nao_mapeadas += 1
                        if self.verbose and nao_mapeadas <= 5:
                            self.stdout.write(f"  ‚ùå N√£o encontrado: {solicitacao.municipio.nome} - {data_str} - {solicitacao.projeto.nome}")

                self.stdout.write(f"‚úÖ {corrigidas} solicita√ß√µes corrigidas")
                self.stdout.write(f"‚ö†Ô∏è  {nao_mapeadas} solicita√ß√µes n√£o puderam ser mapeadas")

        else:
            self.stdout.write("üîç SIMULA√á√ÉO - As seguintes corre√ß√µes seriam feitas:")
            # Mostrar algumas simula√ß√µes
            count = 0
            for coord_planilha, usuario in mapeamento.items():
                if count < 5:
                    self.stdout.write(f"  ‚Ä¢ Eventos de '{coord_planilha}' ‚Üí {usuario.nome_completo}")
                    count += 1

            if len(mapeamento) > 5:
                self.stdout.write(f"  ... e mais {len(mapeamento)-5} mapeamentos")

    def _log_resultado(self, total_corrigidas, total_nao_mapeadas):
        """Log dos resultados para auditoria"""
        resultado = {
            'timestamp': timezone.now().isoformat(),
            'total_corrigidas': total_corrigidas,
            'total_nao_mapeadas': total_nao_mapeadas,
            'dry_run': self.dry_run
        }

        arquivo_log = f"logs/correcao_coordenadores_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"

        try:
            with open(arquivo_log, 'w', encoding='utf-8') as f:
                json.dump(resultado, f, indent=2, ensure_ascii=False)

            self.stdout.write(f"üìù Log salvo em: {arquivo_log}")
        except Exception as e:
            self.stdout.write(self.style.WARNING(f"N√£o foi poss√≠vel salvar log: {e}"))