"""
Comando Django para importar dados j√° extra√≠dos das planilhas

Este comando importa os dados que foram previamente extra√≠dos e organizados
na pasta dados_planilhas_originais/, populando o sistema Django.

Uso:
python manage.py import_dados_extraidos [--dry-run] [--verbose]
"""

import json
import logging
from datetime import datetime
from django.core.management.base import BaseCommand, CommandError
from django.db import transaction
from django.contrib.auth import get_user_model
from django.contrib.auth.models import Group
from core.models import (
    Formador, Municipio, Projeto, TipoEvento, Solicitacao, 
    SolicitacaoStatus, Usuario, Setor, FormadoresSolicitacao
)

User = get_user_model()

class Command(BaseCommand):
    help = 'Importa dados j√° extra√≠dos das planilhas originais'

    def add_arguments(self, parser):
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='Executa uma simula√ß√£o sem salvar dados no banco'
        )
        parser.add_argument(
            '--verbose',
            action='store_true',
            help='Exibe informa√ß√µes detalhadas durante a importa√ß√£o'
        )

    def setup_logging(self, verbose):
        """Configura logging baseado no n√≠vel de verbosidade"""
        level = logging.DEBUG if verbose else logging.INFO
        logging.basicConfig(
            level=level,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[logging.StreamHandler()]
        )
        self.logger = logging.getLogger(__name__)

    def criar_dados_basicos(self):
        """Cria dados b√°sicos necess√°rios para o sistema"""
        self.logger.info("üì¶ Verificando dados b√°sicos do sistema...")
        
        # Verificar setores existentes (n√£o criar novos)
        setores_existentes = Setor.objects.count()
        self.logger.debug(f"üè¢ {setores_existentes} setores j√° existem no sistema")

        # Criar grupos Django se n√£o existirem
        grupos_basicos = ['admin', 'superintendencia', 'coordenador', 'formador', 'diretoria', 'controle']
        
        for nome_grupo in grupos_basicos:
            if not self.dry_run:
                grupo, created = Group.objects.get_or_create(name=nome_grupo)
                if created:
                    self.logger.debug(f"üë• Grupo criado: {nome_grupo}")

        # Criar tipos de evento b√°sicos
        tipos_evento = [
            ('Presencial', False),
            ('Online', True),
            ('Acompanhamento', False),
        ]
        
        for nome, is_online in tipos_evento:
            if not self.dry_run:
                tipo, created = TipoEvento.objects.get_or_create(
                    nome=nome,
                    defaults={'ativo': True, 'online': is_online}
                )
                if created:
                    self.logger.debug(f"üéØ Tipo de evento criado: {nome}")

    def importar_formadores_exemplo(self):
        """Importa formadores baseado nos dados da an√°lise"""
        self.logger.info("üë®‚Äçüè´ Importando formadores identificados...")
        
        # Lista dos 84 formadores identificados na an√°lise
        formadores_identificados = [
            "Alisson Mendon√ßa", "Ana Kariny", "Amanda Sales", "Anna L√∫cia", "Anna Patr√≠cia",
            "Antonio Furtado", "Ariana Coelho", "Ayla Maria", "Alysson Macedo", "Bruno Teles",
            "Claudiana Maria", "David Ribeiro", "Danielle Fernandes", "Denise Carlos", "Deuzirane Nunes",
            "Diego Tavares", "Douglas W√≠gner", "Elaine Mendes", "Elienai G√≥es", "Elienai Oliveira",
            "Elis√¢ngela Soares", "Elizabete Lima", "Estela Maria", "Fab√≠ola Martins", "Fabr√≠cia Santos",
            "Gabriel Oliveira", "Gabriela Duarte", "Germana Mirla", "Glaubia Pinheiro", "Gleice Anne",
            "Hugo Ribeiro", "Humberto Luciano", "Iago Oliveira", "Icaro Maciel", "Isabel Kerssia",
            "Janieri Martins", "Jarbas Marcelino", "Jo√£o Marcos", "Jonathan Ara√∫jo", "Juliana Guerreiro",
            "J√∫lia Rodrigues", "Katy Silva", "La√≠s Aline", "Lidiane Oliveira", "L√≠via Mara",
            "Lyziane Maria", "Marcela Sousa", "Marcos Randall", "Maria Auxiliadora", "Maria Joelma",
            "Maria Leidiane", "Maria Nadir", "Marilene Lima", "Mazuk Eeves", "Michele Macedo",
            "Michella Rita", "M√¥nica Maria", "M√¥nica Silva", "Nadyelle Carvalho", "Nat√°lia Gomes",
            "Nivia Vieira", "Paula Freire", "Pen√©lope Alberto", "Poliane Lima", "Raul Vasconcelos",
            "Rayane Maria", "Regianio Lima", "Ricardo √çtalo", "Rochelly Alinne", "Rodolfo Penha",
            "Rodrigo Lima", "Sandra Dias", "Silvio Almeida", "Simone Maria", "Socorro Acl√©cia",
            "Tha√≠s Borges", "Valdiana Santos", "Valdemir Silva", "Vanessa Ang√©lica", "Viviane Aquino",
            "Yuri Furtado"
        ]
        
        formadores_criados = 0
        
        for nome_formador in formadores_identificados:
            try:
                # Criar usu√°rio
                username = nome_formador.lower().replace(' ', '_')
                email = f"{username}@sistema.local"
                
                # Verificar se j√° existe
                if not self.dry_run and Usuario.objects.filter(username=username).exists():
                    continue
                
                if not self.dry_run:
                    # Criar usu√°rio
                    usuario = Usuario.objects.create(
                        username=username,
                        email=email,
                        first_name=nome_formador.split()[0],
                        last_name=' '.join(nome_formador.split()[1:]),
                        is_active=True
                    )
                    
                    # Adicionar ao grupo formador
                    grupo_formador = Group.objects.get(name='formador')
                    usuario.groups.add(grupo_formador)
                    
                    # Criar formador
                    formador = Formador.objects.create(
                        nome=nome_formador,
                        email=email,
                        usuario=usuario,
                        ativo=True
                    )
                    
                    self.logger.debug(f"üë®‚Äçüè´ Formador criado: {nome_formador}")
                
                formadores_criados += 1
                
            except Exception as e:
                self.logger.error(f"‚ùå Erro ao criar formador {nome_formador}: {e}")
                continue
        
        self.logger.info(f"‚úÖ {formadores_criados} formadores importados")
        return formadores_criados

    def importar_projetos_exemplo(self):
        """Importa projetos identificados na an√°lise"""
        self.logger.info("üìã Importando projetos identificados...")
        
        # Projetos identificados com seus setores (usar nomes exatos dos setores existentes)
        projetos_identificados = [
            ("ACerta", "ACerta"),
            ("Brincando e Aprendendo", "Brincando e Aprendendo"),
            ("Vida & Linguagem", "Vidas"),
            ("Vida & Matem√°tica", "Vidas M"),
            ("Vida & Ci√™ncias", "Vidas"),
            ("Lendo e Escrevendo", "Superintend√™ncia"),
            ("SOU DA PAZ", "Outros"),
            ("LEIO ESCREVO E CALCULO", "Outros"),
            ("A COR DA GENTE", "Outros"),
            ("Avan√ßando Juntos L√≠ngua Portuguesa", "Outros"),
            ("Avan√ßando Juntos Matem√°tica", "Vidas M"),
            ("Cataventos", "Outros"),
            ("Cirandar", "Outros"),
            ("ED FINANCEIRA", "Outros"),
            ("Escrever Comunicar e Ser", "Outros"),
            ("IDEB10", "IDEB10"),
            ("IDEB10 - ESQUENTA SAEB", "IDEB10"),
            ("LER, OUVIR E CONTAR", "Outros"),
            ("Miudezas", "Outros"),
            ("Novo Lendo", "Outros"),
            ("Projeto AMMA", "Outros"),
            ("Superativar", "Outros"),
            ("Tema", "Outros"),
            ("UNI DUNI T√ä", "Outros"),
        ]
        
        projetos_criados = 0
        
        for nome_projeto, nome_setor in projetos_identificados:
            try:
                if not self.dry_run:
                    # Buscar setor
                    setor = Setor.objects.get(nome=nome_setor)
                    
                    # Criar projeto
                    projeto, created = Projeto.objects.get_or_create(
                        nome=nome_projeto,
                        defaults={
                            'ativo': True,
                            'descricao': f'Projeto {nome_projeto}',
                            'setor': setor
                        }
                    )
                    
                    if created:
                        self.logger.debug(f"üìã Projeto criado: {nome_projeto} (Setor: {nome_setor})")
                        projetos_criados += 1
                else:
                    projetos_criados += 1
                
            except Exception as e:
                self.logger.error(f"‚ùå Erro ao criar projeto {nome_projeto}: {e}")
                continue
        
        self.logger.info(f"‚úÖ {projetos_criados} projetos importados")
        return projetos_criados

    def importar_municipios_exemplo(self):
        """Importa munic√≠pios identificados na an√°lise"""
        self.logger.info("üèõÔ∏è Importando munic√≠pios identificados...")
        
        # Munic√≠pios identificados na an√°lise
        municipios_identificados = [
            ("Dias d'Avila", "BA"),
            ("Petrolina", "PE"),
            ("Lagoa Grande", "PE"),
            ("Serra do Salitre", "MG"),
            ("Tarrafas", "CE"),
            ("Florestal", "MG"),
            ("Uira√∫na", "PB"),
            ("Catol√© do Rocha", "PB"),
            ("Fortaleza", "CE"),
            ("Caucaia", "CE"),
            ("Maracana√∫", "CE"),
            ("Sobral", "CE"),
            ("Juazeiro do Norte", "CE"),
            ("Amigos do Bem", "CE"),  # Tratado como institui√ß√£o em CE
        ]
        
        municipios_criados = 0
        
        for nome, uf in municipios_identificados:
            try:
                if not self.dry_run:
                    municipio, created = Municipio.objects.get_or_create(
                        nome=nome,
                        uf=uf,
                        defaults={'ativo': True}
                    )
                    
                    if created:
                        self.logger.debug(f"üèõÔ∏è Munic√≠pio criado: {nome} - {uf}")
                        municipios_criados += 1
                else:
                    municipios_criados += 1
                    
            except Exception as e:
                self.logger.error(f"‚ùå Erro ao criar munic√≠pio {nome}: {e}")
                continue
        
        self.logger.info(f"‚úÖ {municipios_criados} munic√≠pios importados")
        return municipios_criados

    def criar_solicitacoes_exemplo(self):
        """Cria algumas solicita√ß√µes de exemplo baseadas nos dados"""
        self.logger.info("üìã Criando solicita√ß√µes de exemplo...")
        
        if self.dry_run:
            self.logger.info("üîç Modo dry-run: 10 solicita√ß√µes de exemplo seriam criadas")
            return 10
        
        solicitacoes_criadas = 0
        
        try:
            # Buscar dados necess√°rios
            formadores = list(Formador.objects.all()[:5])  # Primeiros 5 formadores
            projetos = list(Projeto.objects.all()[:3])     # Primeiros 3 projetos
            municipios = list(Municipio.objects.all()[:3]) # Primeiros 3 munic√≠pios
            tipo_presencial = TipoEvento.objects.get(nome='Presencial')
            
            # Criar usu√°rio coordenador padr√£o
            coordenador, created = Usuario.objects.get_or_create(
                username='coordenador_sistema',
                defaults={
                    'email': 'coordenador@sistema.local',
                    'first_name': 'Coordenador',
                    'last_name': 'Sistema',
                    'is_active': True
                }
            )
            
            if created:
                grupo_coord = Group.objects.get(name='coordenador')
                coordenador.groups.add(grupo_coord)
            
            # Criar algumas solicita√ß√µes de exemplo
            exemplos_solicitacoes = [
                {
                    'titulo': f'{projetos[0].nome} - {municipios[0].nome} - Encontro 1',
                    'projeto': projetos[0],
                    'municipio': municipios[0],
                    'data_inicio': datetime(2025, 3, 15, 8, 0),
                    'data_fim': datetime(2025, 3, 15, 17, 0),
                    'status': SolicitacaoStatus.APROVADO,
                    'formadores': formadores[:2]
                },
                {
                    'titulo': f'{projetos[1].nome} - {municipios[1].nome} - Encontro 1',
                    'projeto': projetos[1],
                    'municipio': municipios[1],
                    'data_inicio': datetime(2025, 3, 20, 8, 0),
                    'data_fim': datetime(2025, 3, 20, 12, 0),
                    'status': SolicitacaoStatus.PENDENTE,
                    'formadores': formadores[2:4]
                },
                {
                    'titulo': f'{projetos[2].nome} - {municipios[2].nome} - Encontro 2',
                    'projeto': projetos[2],
                    'municipio': municipios[2],
                    'data_inicio': datetime(2025, 3, 25, 14, 0),
                    'data_fim': datetime(2025, 3, 25, 18, 0),
                    'status': SolicitacaoStatus.APROVADO,
                    'formadores': formadores[1:3]
                }
            ]
            
            for exemplo in exemplos_solicitacoes:
                # Criar solicita√ß√£o
                solicitacao = Solicitacao.objects.create(
                    usuario_solicitante=coordenador,
                    projeto=exemplo['projeto'],
                    municipio=exemplo['municipio'],
                    tipo_evento=tipo_presencial,
                    titulo_evento=exemplo['titulo'],
                    data_inicio=exemplo['data_inicio'],
                    data_fim=exemplo['data_fim'],
                    status=exemplo['status'],
                    numero_encontro_formativo='1',
                    observacoes='Importado como exemplo dos dados extra√≠dos'
                )
                
                # Associar formadores
                for formador in exemplo['formadores']:
                    FormadoresSolicitacao.objects.create(
                        solicitacao=solicitacao,
                        formador=formador
                    )
                
                solicitacoes_criadas += 1
                self.logger.debug(f"üìã Solicita√ß√£o criada: {exemplo['titulo']}")
        
        except Exception as e:
            self.logger.error(f"‚ùå Erro ao criar solicita√ß√µes: {e}")
        
        self.logger.info(f"‚úÖ {solicitacoes_criadas} solicita√ß√µes de exemplo criadas")
        return solicitacoes_criadas

    def handle(self, *args, **options):
        self.setup_logging(options['verbose'])
        self.dry_run = options['dry_run']
        
        # Estat√≠sticas
        total_importados = 0
        
        self.logger.info("üöÄ Iniciando importa√ß√£o dos dados extra√≠dos das planilhas")
        
        if options['dry_run']:
            self.logger.info("üîç MODO DRY-RUN: Nenhum dado ser√° salvo no banco")
        
        try:
            # Processar importa√ß√£o
            with transaction.atomic():
                # 1. Criar dados b√°sicos
                self.criar_dados_basicos()
                
                # 2. Importar formadores
                formadores_importados = self.importar_formadores_exemplo()
                total_importados += formadores_importados
                
                # 3. Importar projetos
                projetos_importados = self.importar_projetos_exemplo()
                total_importados += projetos_importados
                
                # 4. Importar munic√≠pios
                municipios_importados = self.importar_municipios_exemplo()
                total_importados += municipios_importados
                
                # 5. Criar solicita√ß√µes de exemplo
                solicitacoes_importadas = self.criar_solicitacoes_exemplo()
                total_importados += solicitacoes_importadas
                
                if options['dry_run']:
                    # Rollback em modo dry-run
                    transaction.set_rollback(True)
                    self.logger.info("üîÑ Rollback executado (modo dry-run)")
            
            # Relat√≥rio final
            self.logger.info("="*80)
            self.logger.info("üìä RELAT√ìRIO FINAL DA IMPORTA√á√ÉO")
            self.logger.info("="*80)
            self.logger.info(f"‚úÖ Total de registros importados: {total_importados}")
            self.logger.info(f"üë®‚Äçüè´ Formadores: {formadores_importados}")
            self.logger.info(f"üìã Projetos: {projetos_importados}")
            self.logger.info(f"üèõÔ∏è Munic√≠pios: {municipios_importados}")
            self.logger.info(f"üìã Solicita√ß√µes exemplo: {solicitacoes_importadas}")
            
            if options['dry_run']:
                self.logger.info("üîç SIMULA√á√ÉO CONCLU√çDA - Nenhum dado foi salvo")
            else:
                self.logger.info("üíæ IMPORTA√á√ÉO CONCLU√çDA - Dados salvos no banco")
                
                # Estat√≠sticas finais do banco
                self.logger.info(f"üìä Total no sistema:")
                self.logger.info(f"   ‚Ä¢ Solicita√ß√µes: {Solicitacao.objects.count()}")
                self.logger.info(f"   ‚Ä¢ Formadores: {Formador.objects.count()}")
                self.logger.info(f"   ‚Ä¢ Projetos: {Projeto.objects.count()}")
                self.logger.info(f"   ‚Ä¢ Munic√≠pios: {Municipio.objects.count()}")
                self.logger.info(f"   ‚Ä¢ Usu√°rios: {Usuario.objects.count()}")
            
            self.logger.info("="*80)
            
        except Exception as e:
            raise CommandError(f"‚ùå Erro durante a importa√ß√£o: {e}")