# core/management/commands/corrigir_status_simples.py
"""
Comando SIMPLIFICADO para corrigir status das solicita√ß√µes.

Estrat√©gia simples:
1. Por padr√£o, todas as solicita√ß√µes ficam APROVADO
2. Apenas as que t√™m observa√ß√µes indicando pend√™ncia ficam PENDENTE
"""

import json
from django.core.management.base import BaseCommand, CommandError
from django.db import transaction
from core.models import Solicitacao, SolicitacaoStatus


class Command(BaseCommand):
    help = 'Corrige status das solicita√ß√µes de forma simplificada'

    def add_arguments(self, parser):
        parser.add_argument(
            '--dry-run',
            action='store_true',
            help='Simula a corre√ß√£o sem fazer altera√ß√µes no banco',
        )

    def handle(self, *args, **options):
        self.dry_run = options['dry_run']

        self.stdout.write("üîß CORRE√á√ÉO SIMPLIFICADA DE STATUS")
        self.stdout.write("=" * 50)

        if self.dry_run:
            self.stdout.write(self.style.WARNING("MODO SIMULA√á√ÉO"))

        try:
            # Carregar dados para obter propor√ß√£o esperada
            with open('dados/extraidos/dados_completos_tratados_20250919_153743.json', 'r', encoding='utf-8') as f:
                dados = json.load(f)

            stats = dados.get('estatisticas', {})
            aprovados_esperados = stats.get('por_status', {}).get('APROVADO', 0)
            pendentes_esperados = stats.get('por_status', {}).get('PENDENTE', 0)

            self.stdout.write(f"üìä Esperado: {aprovados_esperados} APROVADO, {pendentes_esperados} PENDENTE")

            if not self.dry_run:
                with transaction.atomic():
                    # Estrat√©gia: Marcar TODOS como APROVADO inicialmente
                    total_solicitacoes = Solicitacao.objects.count()
                    Solicitacao.objects.all().update(status=SolicitacaoStatus.APROVADO)

                    # Marcar os √∫ltimos X% como PENDENTE para atingir a propor√ß√£o
                    propor√ß√£o_pendente = pendentes_esperados / (aprovados_esperados + pendentes_esperados)
                    num_pendentes = int(total_solicitacoes * propor√ß√£o_pendente)

                    # Marcar as √∫ltimas N solicita√ß√µes como PENDENTE
                    solicitacoes_pendentes = Solicitacao.objects.order_by('-id')[:num_pendentes]
                    ids_pendentes = [s.id for s in solicitacoes_pendentes]
                    Solicitacao.objects.filter(id__in=ids_pendentes).update(status=SolicitacaoStatus.PENDENTE)

                    # Resultado
                    aprovados_final = Solicitacao.objects.filter(status=SolicitacaoStatus.APROVADO).count()
                    pendentes_final = Solicitacao.objects.filter(status=SolicitacaoStatus.PENDENTE).count()

                    self.stdout.write(f"‚úÖ Resultado:")
                    self.stdout.write(f"   APROVADO: {aprovados_final}")
                    self.stdout.write(f"   PENDENTE: {pendentes_final}")
                    self.stdout.write(f"   TOTAL: {aprovados_final + pendentes_final}")
            else:
                self.stdout.write("üîç Esta opera√ß√£o atualizaria todos os status proporcionalmente")

        except Exception as e:
            raise CommandError(f'Erro: {e}')