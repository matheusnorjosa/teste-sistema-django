"""
Signals para atualiza√ß√µes autom√°ticas do mapa
"""
from django.db.models.signals import post_save, post_delete
from django.dispatch import receiver
from django.core.cache import cache
from django.utils import timezone

from core.models import Solicitacao, SolicitacaoStatus


@receiver(post_save, sender=Solicitacao)
def on_solicitacao_saved(sender, instance, created, **kwargs):
    """
    Signal disparado quando uma solicita√ß√£o √© salva
    """
    # S√≥ processar se o status for relevante para o mapa
    if instance.status in [
        SolicitacaoStatus.APROVADO,
        SolicitacaoStatus.PRE_AGENDA,
    ]:
        # Invalidar cache do mapa
        cache.delete('mapa_dados_brasil')
        cache.delete('mapa_estatisticas')
        
        # Marcar que houve mudan√ßa para o tempo real
        cache.set('mapa_last_update', timezone.now().isoformat(), timeout=3600)
        
        # Log da atualiza√ß√£o
        print(f"üó∫Ô∏è Mapa atualizado: Nova solicita√ß√£o em {instance.municipio.nome}/{instance.municipio.uf}")


@receiver(post_delete, sender=Solicitacao)
def on_solicitacao_deleted(sender, instance, **kwargs):
    """
    Signal disparado quando uma solicita√ß√£o √© deletada
    """
    # Invalidar cache do mapa
    cache.delete('mapa_dados_brasil')
    cache.delete('mapa_estatisticas')
    
    # Marcar que houve mudan√ßa para o tempo real
    cache.set('mapa_last_update', timezone.now().isoformat(), timeout=3600)
    
    # Log da atualiza√ß√£o
    print(f"üó∫Ô∏è Mapa atualizado: Solicita√ß√£o removida de {instance.municipio.nome}/{instance.municipio.uf}")


# Fun√ß√£o para ser chamada manualmente quando necess√°rio
def invalidate_mapa_cache():
    """
    Fun√ß√£o para invalidar cache do mapa manualmente
    """
    cache.delete('mapa_dados_brasil')
    cache.delete('mapa_estatisticas')
    print("üó∫Ô∏è Cache do mapa invalidado manualmente")
